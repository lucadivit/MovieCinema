<?php/** * Le classi View permettono l'iterazione con l'utente in particolare VAutenticazione si occupa di ciò che concerne, appunto, l'autenticazione. * Estende la classe View * * @author Luca & Valentina * @package View * @category Autenticazione */class VAutenticazione extends View{        /**     * Questa funzione si occupa di prelevare l'username relativo ad un utente (sia esso user o admin)      * @access public     * @return null|String username utente/admin     */    public function getUsername() {        if (isset($_REQUEST['username'])) {            $username = $_REQUEST['username'];            return $username;        } else {            return NULL;        }    }    /**     * Questa funzione si occupa di prelevare la password relativa ad un utente (sia esso user o admin)     * @access public     * @return null|String password user/admin     */      public function getPassword() {        if (isset($_REQUEST['password'])) {            $password = $_REQUEST['password'];            return $password;        } else {            return NULL;        }      }       /**     * Questa funzione si occupa di prelevare l'email relativa ad un utente (sia esso user o admin)      * @access public     * @return null|String email user/admin     */        public function getEmail() {          if(isset($_REQUEST['email'])){              $email=$_REQUEST['email'];              return $email;          }else{              return NULL;          }      }       /**     * Questa funzione si occupa di restituire l'username e la password solo dopo aver subito una validazione. Restituisce un array      * associativo contenente le credenziali (password e username) dell'utente (sia esso admin o user) in caso di successo della validazione. In caso di     * fallimento restituisce un template di errore.     * @access public      * @return mixed|array rispettivamente template di errore e credenziali d'accesso     */      public function getCredenzialiValide() {          $Home = USingleton::getInstaces('VHome');          $this->validazioneCredenziali();          if(in_array('TRUE', $this->dati_errati)){              return $Home->impostapaginaerrore();          }else{              $credenziali=array('username'=>$this->getUsername(),'password'=>$this->getPassword());              return $credenziali;          }      }          /**     * Questa funzione si occupa di validare le credenziali di accesso (username e password) impostando l'attributo dati_errati a      * TRUE o FALSE a seconda se la validazione non è andata a buon fine o è andata a buon fine rispettivamente.     * @access public     */      public function validazioneCredenziali() {          $c_auth=USingleton::getInstaces('CAutenticazione');          $username=$this->getUsername();          $password=$this->getPassword();          if($c_auth->controllaCredenziali($username,$password)){              $this->dati_errati['credenziali']='FALSE';          }else{              $this->dati_errati['credenziali']='TRUE';          }      }             /**     * Stampa la lista degli utenti registrati     * @return mixed template con la lista degli utenti     */        public function pubblicalista(){          $c_aut=  USingleton::getInstaces('CAutenticazione');          $lista= $c_aut->listautenti();          $this->assign('lista',$lista);          return $this->fetch('./smarty/smarty-dir/templates/listautenti.tpl');                               }            }